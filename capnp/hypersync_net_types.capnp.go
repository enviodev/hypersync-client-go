// Code generated by capnpc-go. DO NOT EDIT.

package hypersynccapnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type QueryResponseData capnp.Struct

// QueryResponseData_TypeID is the unique identifier for the type QueryResponseData.
const QueryResponseData_TypeID = 0x89cc27a9973e9d31

func NewQueryResponseData(s *capnp.Segment) (QueryResponseData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return QueryResponseData(st), err
}

func NewRootQueryResponseData(s *capnp.Segment) (QueryResponseData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return QueryResponseData(st), err
}

func ReadRootQueryResponseData(msg *capnp.Message) (QueryResponseData, error) {
	root, err := msg.Root()
	return QueryResponseData(root.Struct()), err
}

func (s QueryResponseData) String() string {
	str, _ := text.Marshal(0x89cc27a9973e9d31, capnp.Struct(s))
	return str
}

func (s QueryResponseData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QueryResponseData) DecodeFromPtr(p capnp.Ptr) QueryResponseData {
	return QueryResponseData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QueryResponseData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QueryResponseData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QueryResponseData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QueryResponseData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QueryResponseData) Blocks() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s QueryResponseData) HasBlocks() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s QueryResponseData) SetBlocks(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s QueryResponseData) Transactions() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s QueryResponseData) HasTransactions() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s QueryResponseData) SetTransactions(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

func (s QueryResponseData) Logs() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return []byte(p.Data()), err
}

func (s QueryResponseData) HasLogs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s QueryResponseData) SetLogs(v []byte) error {
	return capnp.Struct(s).SetData(2, v)
}

func (s QueryResponseData) Traces() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return []byte(p.Data()), err
}

func (s QueryResponseData) HasTraces() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s QueryResponseData) SetTraces(v []byte) error {
	return capnp.Struct(s).SetData(3, v)
}

// QueryResponseData_List is a list of QueryResponseData.
type QueryResponseData_List = capnp.StructList[QueryResponseData]

// NewQueryResponseData creates a new list of QueryResponseData.
func NewQueryResponseData_List(s *capnp.Segment, sz int32) (QueryResponseData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[QueryResponseData](l), err
}

// QueryResponseData_Future is a wrapper for a QueryResponseData promised by a client call.
type QueryResponseData_Future struct{ *capnp.Future }

func (f QueryResponseData_Future) Struct() (QueryResponseData, error) {
	p, err := f.Future.Ptr()
	return QueryResponseData(p.Struct()), err
}

type RollbackGuard capnp.Struct

// RollbackGuard_TypeID is the unique identifier for the type RollbackGuard.
const RollbackGuard_TypeID = 0x957d56ef57fdaf4b

func NewRollbackGuard(s *capnp.Segment) (RollbackGuard, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return RollbackGuard(st), err
}

func NewRootRollbackGuard(s *capnp.Segment) (RollbackGuard, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return RollbackGuard(st), err
}

func ReadRootRollbackGuard(msg *capnp.Message) (RollbackGuard, error) {
	root, err := msg.Root()
	return RollbackGuard(root.Struct()), err
}

func (s RollbackGuard) String() string {
	str, _ := text.Marshal(0x957d56ef57fdaf4b, capnp.Struct(s))
	return str
}

func (s RollbackGuard) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RollbackGuard) DecodeFromPtr(p capnp.Ptr) RollbackGuard {
	return RollbackGuard(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RollbackGuard) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RollbackGuard) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RollbackGuard) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RollbackGuard) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RollbackGuard) Hash() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s RollbackGuard) HasHash() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RollbackGuard) SetHash(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s RollbackGuard) BlockNumber() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s RollbackGuard) SetBlockNumber(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s RollbackGuard) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s RollbackGuard) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s RollbackGuard) FirstBlockNumber() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s RollbackGuard) SetFirstBlockNumber(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s RollbackGuard) FirstParentHash() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s RollbackGuard) HasFirstParentHash() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RollbackGuard) SetFirstParentHash(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// RollbackGuard_List is a list of RollbackGuard.
type RollbackGuard_List = capnp.StructList[RollbackGuard]

// NewRollbackGuard creates a new list of RollbackGuard.
func NewRollbackGuard_List(s *capnp.Segment, sz int32) (RollbackGuard_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[RollbackGuard](l), err
}

// RollbackGuard_Future is a wrapper for a RollbackGuard promised by a client call.
type RollbackGuard_Future struct{ *capnp.Future }

func (f RollbackGuard_Future) Struct() (RollbackGuard, error) {
	p, err := f.Future.Ptr()
	return RollbackGuard(p.Struct()), err
}

type QueryResponse capnp.Struct

// QueryResponse_TypeID is the unique identifier for the type QueryResponse.
const QueryResponse_TypeID = 0xcd6a4c10f33609e2

func NewQueryResponse(s *capnp.Segment) (QueryResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return QueryResponse(st), err
}

func NewRootQueryResponse(s *capnp.Segment) (QueryResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return QueryResponse(st), err
}

func ReadRootQueryResponse(msg *capnp.Message) (QueryResponse, error) {
	root, err := msg.Root()
	return QueryResponse(root.Struct()), err
}

func (s QueryResponse) String() string {
	str, _ := text.Marshal(0xcd6a4c10f33609e2, capnp.Struct(s))
	return str
}

func (s QueryResponse) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (QueryResponse) DecodeFromPtr(p capnp.Ptr) QueryResponse {
	return QueryResponse(capnp.Struct{}.DecodeFromPtr(p))
}

func (s QueryResponse) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s QueryResponse) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s QueryResponse) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s QueryResponse) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s QueryResponse) ArchiveHeight() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s QueryResponse) SetArchiveHeight(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s QueryResponse) NextBlock() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s QueryResponse) SetNextBlock(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s QueryResponse) TotalExecutionTime() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s QueryResponse) SetTotalExecutionTime(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s QueryResponse) Data() (QueryResponseData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return QueryResponseData(p.Struct()), err
}

func (s QueryResponse) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s QueryResponse) SetData(v QueryResponseData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewData sets the data field to a newly
// allocated QueryResponseData struct, preferring placement in s's segment.
func (s QueryResponse) NewData() (QueryResponseData, error) {
	ss, err := NewQueryResponseData(capnp.Struct(s).Segment())
	if err != nil {
		return QueryResponseData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s QueryResponse) RollbackGuard() (RollbackGuard, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return RollbackGuard(p.Struct()), err
}

func (s QueryResponse) HasRollbackGuard() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s QueryResponse) SetRollbackGuard(v RollbackGuard) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewRollbackGuard sets the rollbackGuard field to a newly
// allocated RollbackGuard struct, preferring placement in s's segment.
func (s QueryResponse) NewRollbackGuard() (RollbackGuard, error) {
	ss, err := NewRollbackGuard(capnp.Struct(s).Segment())
	if err != nil {
		return RollbackGuard{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// QueryResponse_List is a list of QueryResponse.
type QueryResponse_List = capnp.StructList[QueryResponse]

// NewQueryResponse creates a new list of QueryResponse.
func NewQueryResponse_List(s *capnp.Segment, sz int32) (QueryResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[QueryResponse](l), err
}

// QueryResponse_Future is a wrapper for a QueryResponse promised by a client call.
type QueryResponse_Future struct{ *capnp.Future }

func (f QueryResponse_Future) Struct() (QueryResponse, error) {
	p, err := f.Future.Ptr()
	return QueryResponse(p.Struct()), err
}
func (p QueryResponse_Future) Data() QueryResponseData_Future {
	return QueryResponseData_Future{Future: p.Future.Field(0, nil)}
}
func (p QueryResponse_Future) RollbackGuard() RollbackGuard_Future {
	return RollbackGuard_Future{Future: p.Future.Field(1, nil)}
}

const schema_9289a56a18f880c5 = "x\xda\x8c\x93Ok\x13[\x18\xc6\x9f\xe7\x9c\xe4\x96," +
	"J2$\x8b{\xe1\x96tw\xa1p\xd5\"\xba(h" +
	"E\x14+\xfe\xa1\xa7\x88n\x84r2=v\xd2Nf" +
	"\xc63'\x92\x80\x85*\x15ZQ\xa8\xa5\"J\x0bn" +
	"\x04]\xf9)\xdc\xe9\x97p\xe3\xd2\x85\x1b722I" +
	"\x93\x14\xa9\xe0\xee\x9c\xf7}^x\x7f\xcf\xc3{\xe22" +
	"\xcf\x15\xa6\xc7c\x01\xa1\xfe-\xfe\x95M\xef\x9f}\xf1" +
	"\xee\xbf\x8f[\xf0&\x99}X\xff\xfe\xf7\xca\x9b\xad\x1d" +
	"\x14\x0bc\xc0\xc9\x09\xee\xb0z\x8ac@u\x9a_\xc0" +
	"\xec\xca\xfb\x1f\xb7\xbe\xde\\{\x0e5IyH-r" +
	"uIXV'z\xcf\x7fD\x9d`\xf6\xb9t\xfa[" +
	"\xe5\xea\xca\xa7#\xe5g\xa4eU\xc9\xfcyM\xd6\x89" +
	"\xff3_'Qr<\xe8\x16\x13c\xd3n\xe4/F" +
	"\xc6-\xbanb\xd2c\xbd\xd6\x8cj\x1b\xdb]0i" +
	"\x12G\xa9\xb9\xa0\x1d\xf5<\xa9*\xb2\x00\x14\x08xz" +
	"\x06P\xb7%U \xe8\x915\xe6E\xb3\x02\xa8%I" +
	"\x95\x08zB\xd4(\x00\xaf5\x05\xa8@R9AO" +
	"\xca\x1a%\xe0\xdd\xcd\xc7CI\xd5\x11\x9cm\x84\xb1\xbf" +
	"\x9ar\x1c\x82\xe3`\xe6\xac\x8eR\xed;\x94\x9bq4" +
	",\x97\xc3xy\xf8\x99uV\xfbf42\xc0)\xfc" +
	"\x0eg!\x0e\xc3\x86\xf6W\xeb\x97\xda\xda.\xe5(\xb5" +
	"!\xcaZ\xbe`GRm\x08\x0eH\x1e4\x00\xb5." +
	"\xa9\x9e\xe4$\xec\x93l-\x00jSR\xed\xe6$\xa2" +
	"O\xf2\xec1\xa0v%\xd5kA\xaf\xc0\x1a\x0b\x80\xb7" +
	"\xff\x10P{\x92\xea\xad`9\xd0i0\xdc\xb4\xc7z" +
	"\xbd\xdd\xc2X\xc3X\x96 X\xca\x91\x9b-\x93:\xdd" +
	"\x02\x13\x16!X\x04\xb3;M\x9b\xba\xf3a\xcc\x9e\xbe" +
	"a,0\xd4\xf7z\xf3\xda\xd2DnN\xa7\x01\xfe\xdc" +
	"\x89A\xb0\xf5^\xb2\xbf8a\x01u_Rm\x1e\x0a" +
	"\xf5QN\xbd!\xa9\xb6\x0f\x85\xfa\xf4\x15\xa0\xb6%\xd5" +
	"\x9e \x0f2}9u\x94\x13v\xe4D\xa6\xad\x1f4" +
	"\xef\x999\xd4Ms9pC\xd4\xc8trR\x1f\\" +
	"\x1dY\x12;\x1d^\xec\x18\xfam\xd7\x8c\xa3\x1bM\xd9" +
	"2\x83fyI;\xcd\xca\xe8\xa0@V\xc0\xcc\x1e\xa4" +
	"\x8c~\xcc\xac\x8c\xae\xa8\xaf\xf8\x19\x00\x00\xff\xff\xb3*" +
	"\xdc\x14"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9289a56a18f880c5,
		Nodes: []uint64{
			0x89cc27a9973e9d31,
			0x957d56ef57fdaf4b,
			0xcd6a4c10f33609e2,
		},
		Compressed: true,
	})
}
